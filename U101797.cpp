#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <vector>
#include <sstream>
using namespace std;
const int max1 = 101;
const int max2 = 101;
class Matrix {
	public:
	Matrix(int x = 0) : ro(x) {}
	Matrix(int x, int y, double a[max1]) : ro(x), co(y) {
		for(int i = 1; i <= ro; i++) el[i][1] = a[i];
	}
	Matrix(int x, int y, double a[max1][max2]) : ro(x), co(y) {
		for(int i = 1; i <= ro; i++)
			for(int j = 1; j <= co; j++) el[i][j] = a[i][j];
	}
	Matrix transpose();
	int row() const {
		return ro;
	}
	int col() const {
		return co;
	}
	double ele(const int &i, const int &j) const {
		return el[i][j];
	}
	void change(int i, int j, double x) {
		el[i][j] = x;
	}
	double sum() {
		double s = 0;
		for(int i = 1; i <= ro; i++)
			for(int j = 1; j <= co; j++) s += el[i][j];
		return s;
	}
	void print() {
		for(int i = 1; i <= ro; i++) {
			for(int j = 1; j <= co; j++) printf("%.6lf ", el[i][j]);
		}
	}
	void printerr() {
		for(int i = 1; i <= ro; i++) {
			for(int j = 1; j <= co; j++) fprintf(stderr, "%.6lf ", el[i][j]);
			fprintf(stderr,"\n");
		}
		fprintf(stderr,"\n");
	}
	private:
	int ro;
	int co;
	double el[max1][max2];
};
int data2_num = 65;
const int data_num = 1871;
const int feature = 100;
const int hidden = 25;
const int output = 10;
const double eta1 = 0.5;
const double eta2 = 0.5;
double mdata[data_num + 5][101];
char mdata2[data_num + 5][11][11];
Matrix V, W;
double Y[data_num + 5];
Matrix alpha, b, hidden_bias, mbeta, error3, error2, deltaW, deltaV, y, output_bias;
Matrix Matrix::transpose() {
	double temp[max1][max2];
	int row = this->row();
	int col = this->col();
	for(int i = 1; i <= row; i++)
		for(int j = 1; j <= col; j++) temp[j][i] = this->ele(i, j);
	return Matrix(this->col(), this->row(), temp);
}
inline Matrix operator+(const Matrix &lhs, const Matrix &rhs) {
	double temp[max1][max2];
	if(lhs.row() != rhs.row() || lhs.col() != rhs.col()) return Matrix(-1);
	for(int i = 1; i <= lhs.row(); i++)
		for(int j = 1; j <= lhs.col(); j++) temp[i][j] = lhs.ele(i, j) + rhs.ele(i, j);
	return Matrix(lhs.row(), lhs.col(), temp);
}
inline Matrix operator-(const Matrix &lhs, const Matrix &rhs) {
	double temp[max1][max2];
	for(int i = 1; i <= rhs.row(); i++)
		for(int j = 1; j <= rhs.col(); j++) temp[i][j] = -rhs.ele(i, j);
	return lhs + Matrix(rhs.row(), rhs.col(), temp);
}
inline Matrix operator-(const double &lhs, const Matrix &rhs) {
	double temp[max1][max2];
	for(int i = 1; i <= rhs.row(); i++)
		for(int j = 1; j <= rhs.col(); j++) temp[i][j] = lhs - rhs.ele(i, j);
	return Matrix(rhs.row(), rhs.col(), temp);
}
inline Matrix operator*(const Matrix &lhs, const Matrix &rhs) {
	if(lhs.col() != rhs.row()) return Matrix(-1);
	double temp[max1][max2];
	memset(temp, 0, sizeof(temp));
	for(int i = 1; i <= lhs.row(); i++)
		for(int j = 1; j <= rhs.col(); j++)
			for(int k = 1; k <= lhs.col(); k++) temp[i][j] += lhs.ele(i, k) * rhs.ele(k, j);
	return Matrix(lhs.row(), rhs.col(), temp);
}
inline Matrix operator*(const double &lhs, const Matrix &rhs) {
	double temp[max1][max2];
	for(int i = 1; i <= rhs.row(); i++)
		for(int j = 1; j <= rhs.col(); j++) temp[i][j] = rhs.ele(i, j) * lhs;
	return Matrix(rhs.row(), rhs.col(), temp);
}
inline Matrix operator->*(const Matrix &lhs, const Matrix &rhs) {
	if(lhs.row() != rhs.row() || lhs.col() != rhs.col()) return Matrix(-1);
	double temp[max1][max2];
	for(int i = 1; i <= lhs.row(); i++)
		for(int j = 1; j <= lhs.col(); j++) temp[i][j] = lhs.ele(i, j) * rhs.ele(i, j);
	return Matrix(lhs.row(), lhs.col(), temp);
}
inline Matrix operator/(const Matrix &lhs, const double &rhs) {
	double temp[max1][max2];
	for(int i = 1; i <= lhs.row(); i++)
		for(int j = 1; j <= lhs.col(); j++) temp[i][j] = lhs.ele(i, j) / rhs;
	return Matrix(lhs.row(), lhs.col(), temp);
}
void read() {
	char tmpc;
	for(int i = 1; i <= data_num; i++){
		for(int j = 1; j <= 100; j++) {
			scanf(" %c", &tmpc);
			if(tmpc == '#') mdata[i][j] = 1;
			if(tmpc == '=') mdata[i][j] = 0.5;
			if(tmpc == '.') mdata[i][j] = 0;
		}
	}
	for(int i = 1; i <= data_num; i++) cin >> Y[i];
	return;
}
void read3() {
	for(int i = 1; i <= data2_num; i++){
		for(int j = 1; j <= 10; j++) {
			for(int k = 1; k <= 10; k++) {
				scanf(" %c", &mdata2[i][j][k]);
				if(!mdata2[i][j][k]) {
					cerr << i << endl;
				}
			}
		}
	}
	for(int i = 1; i <= data2_num; i++) cin >> Y[i];
	return;
}
int get_data(int id, Matrix &T) {
	T = Matrix(feature, 1, mdata[id]);
	return Y[id];
}
double sigmoid(double t) {
	return (double)1 / (double(1 + exp(-t)));
}
Matrix sigmoid(Matrix T) {
	double temp[max1][max2];
	for(int i = 1; i <= T.row(); i++)
		for(int j = 1; j <= T.col(); j++) {
			double jf = T.ele(i, j);
			temp[i][j] = sigmoid(jf);
		}
	return Matrix(T.row(), T.col(), temp);
}
void random_inilialize() {
	double temp[max1][max2];
	double temp1[max1];
	for(int i = 1; i <= hidden; i++)
		for(int j = 1; j <= feature; j++) temp[i][j] = double(rand() % 1000) / 5000 - 0.1;
	V = Matrix(hidden, feature, temp);
	for(int i = 1; i <= output; i++)
		for(int j = 1; j <= hidden; j++) temp[i][j] = double(rand() % 1000) / 5000 - 0.1;
	W = Matrix(output, hidden, temp);
	for(int i = 1; i <= hidden; i++) temp1[i] = double(rand() % 1000) / 5000 - 0.1;
	hidden_bias = Matrix(hidden, 1, temp1);
	for(int i = 1; i <= output; i++) temp1[i] = double(rand() % 1000) / 5000 - 0.1;
	output_bias = Matrix(output, 1, temp1);
}
Matrix compute_error(Matrix out, int right) {
	double temp[max1];
	if(right == 0) right = 10;
	for(int i = 1; i <= output; i++) {
		double o = ((i == right) ? 1 : 0);
		double t = out.ele(i, 1);
		temp[i] = t * (1 - t) * (o - t);
	}
	return Matrix(out.row(), 1, temp);
}
void trainANN(Matrix X, int right) {
	alpha = V * X;
	b = sigmoid(alpha - hidden_bias);
	mbeta = W * b;
	y = sigmoid(mbeta - output_bias);
	error3 = compute_error(y, right);
	deltaW = eta1 * error3 * b.transpose();
	error2 = b ->* (1-b) ->* (W.transpose() * error3);
	deltaV = eta2 * error2 * X.transpose();
	V = V + deltaV;
	W = W + deltaW;
	output_bias = output_bias - eta1 * error3;
	hidden_bias = hidden_bias - eta2 * error2;
	return;
}
istringstream sss;

char ch[] = "0.058348 -0.005313 -1.051107 -0.947796 -0.942028 -1.589107 -1.310954 0.153763 0.523329 0.144094 0.057997 0.066067 -0.004467 -0.817631 -1.124008 -0.760687 -0.252225 -0.694998 -1.481068 -1.013588 0.039440 0.230795 0.522860 2.295743 1.294815 1.050118 0.704753 0.816666 -0.766203 -1.731569 -0.666524 -1.966919 -3.209617 -3.264899 -2.309995 -1.298482 -0.603540 -0.924736 -0.650390 -1.249848 -0.714747 -0.191837 -0.492200 -0.644140 -1.547147 1.663624 0.498752 -0.701631 0.145392 -1.602674 -0.480780 -1.159361 0.169121 1.073828 -0.684850 0.195728 0.602957 0.012961 -1.217597 -1.563704 -0.455431 -2.557344 -4.721805 -4.499073 -3.320080 -0.323214 0.099298 -2.100168 -1.480248 -1.831553 -0.107938 -0.395407 0.758999 0.978312 1.104644 1.926994 0.416531 1.087333 0.510025 -1.774952 0.545879 -0.902925 -1.416100 -0.953376 -1.369944 -0.483824 0.543573 0.383360 -0.251693 -0.738262 -0.039643 -0.716190 0.365396 -0.808667 -1.347472 -0.618170 -0.912377 -0.080205 -0.373730 -1.022878 0.094094 0.126622 0.761932 -0.312135 -0.859580 -1.178122 -0.706947 -0.041256 -1.579913 -0.662641 0.079449 0.243174 -0.007726 -0.205883 -0.508861 -2.087009 -1.824196 -2.726828 -2.435390 0.312561 0.012056 -0.275762 -0.052736 0.029841 0.222983 -2.605960 -1.740960 -1.288720 -1.229541 -1.749892 0.008218 0.704004 1.728261 2.403899 2.966878 0.783968 1.041071 1.687827 1.065169 1.275536 0.402224 1.537644 1.479188 1.417077 2.385178 1.210874 0.308864 2.065055 2.365690 1.121604 -0.268697 0.483896 -0.775709 -1.976007 -0.798926 -0.629903 -0.483242 0.022929 -0.242205 -0.346078 0.287584 -0.366716 -0.159123 -1.902215 -1.710327 -0.238014 -0.612105 -0.706075 -0.494124 0.521649 -0.190385 -0.476780 -1.644169 -1.008701 -1.331843 -1.487121 -1.080612 -0.716437 -1.854545 -1.125753 0.234124 0.313283 -0.170704 -1.309179 -1.291467 -1.526805 -1.059732 -0.666112 -1.213663 -1.138768 -0.165794 0.439608 0.430631 -0.185235 -1.539525 0.131385 -0.490891 -1.292717 -0.618908 -0.533652 0.060277 -0.094012 0.076748 -0.856534 -0.744119 0.352257 -0.557379 -1.164229 -2.756838 -1.620256 -0.068707 0.102038 -0.297927 -1.198145 -1.532149 -2.060371 -0.034527 -0.356562 -0.130408 -0.758196 -0.110758 0.306889 -0.973997 -1.959229 -2.176917 0.174481 -1.455096 -0.415011 -0.491810 0.987925 -0.085373 0.358426 0.240710 0.712513 0.169953 0.770121 -0.691407 0.946362 0.635925 -0.661852 -0.075605 0.754855 -0.956237 -0.699484 -0.188802 0.582301 -0.009044 -0.771217 -0.820906 0.341822 0.320411 -0.794463 -2.559242 -4.749302 -3.226101 -2.198655 -3.112646 -1.033681 -1.631341 -1.268986 0.362352 1.122673 1.735276 2.100778 1.831630 2.396021 0.139942 -1.216500 0.658928 -0.081365 0.084586 -0.108740 -0.559859 -1.111640 -2.316879 -2.271059 -2.142584 -0.917240 -1.307817 -0.827347 -0.203799 -1.700995 -2.131386 -0.894614 -0.668532 0.151787 -0.657728 -0.305011 0.578153 0.229093 0.019963 0.156178 1.376628 0.768353 0.968762 0.423915 -0.869570 -0.742687 -0.280445 0.776012 0.120090 -0.035003 -0.855030 -1.200857 -1.463219 0.516773 0.629806 -0.353501 0.956155 0.021927 0.153450 -0.189740 0.389226 0.373104 1.091610 0.427892 0.356378 0.494474 -1.127156 1.480919 -0.185954 -0.702413 -0.174946 -1.656790 1.718376 -0.493772 -1.680362 -0.260284 -3.404123 -3.377614 -0.433270 -0.771043 0.433137 -0.364136 0.122411 0.487226 -1.799613 0.832243 0.759257 0.487419 -0.536872 -0.893026 -0.278108 0.901059 1.568554 -0.049256 1.090811 -1.802598 -1.512119 -1.331522 -0.672809 -0.713065 -0.316550 0.041987 -1.255961 -1.525231 -0.876673 0.603941 0.178603 1.114560 -0.017348 -1.065728 -1.225393 -2.338419 -2.685490 -1.903402 -2.347739 0.215558 0.544142 0.457442 0.124999 -0.480500 -0.173369 0.144088 1.145295 -0.271174 -0.065391 1.008017 0.472944 -0.215338 0.529874 0.412913 0.211787 0.279480 1.067065 -0.222121 -0.624576 -0.901666 0.241431 -0.280820 0.054223 -0.356266 -0.234048 -0.684019 -1.770350 -1.848828 -2.599785 -2.297084 -1.280888 -0.152399 0.043116 -0.018622 -0.655169 0.220095 -0.340677 0.201956 -0.010839 0.430286 -0.047212 -0.714222 0.002036 -0.164199 -1.177551 -1.340462 -1.675227 -0.429442 3.006678 1.857278 1.242808 -0.681639 0.143020 -0.200311 -2.102640 -2.782510 -1.512538 -1.906861 1.040848 -0.665324 -0.371335 -0.811580 0.015335 0.352046 -0.878662 -0.076723 -0.643391 -0.088603 -0.248133 -0.596514 -0.703616 -0.635261 0.270530 -0.463862 -0.008713 0.507470 1.336953 1.443014 2.634188 1.045329 -1.302950 -2.000838 0.446282 -0.335763 -0.827198 -0.959033 0.686569 2.582654 -0.174722 -2.055493 -1.259613 0.258802 0.759320 0.002006 -0.241752 0.078299 0.216880 -0.239941 -2.924488 -0.808757 -1.420367 -0.207053 0.288895 1.828974 -1.104850 -1.386069 0.313998 0.467017 -1.334697 -0.954874 -0.276713 -0.651439 0.221871 -0.806079 -0.489177 -0.961581 -0.931083 -1.322002 -2.706615 -1.774047 -0.475772 -0.816023 0.048000 0.157694 -0.690854 -1.097189 -1.450918 -1.504655 -0.661790 -0.385851 -0.404074 -0.662119 -0.037449 0.077561 0.391587 1.247350 -1.088861 -0.841675 -0.513975 0.677367 0.888647 -0.245753 -0.200983 -0.289282 0.891211 0.078152 -0.323917 0.128935 1.487145 1.392739 0.413266 -0.776537 -0.112928 -0.181438 -0.100209 -0.040623 -0.576864 0.930175 0.720655 0.344595 -1.132755 -0.318930 -0.034568 0.182500 -0.394788 -0.602238 -0.644861 2.278074 -0.061578 1.146794 0.955262 0.577700 -0.842189 1.022682 -0.188351 0.491568 0.528905 3.429329 2.751545 2.349862 1.673837 0.470208 -0.057606 0.123770 -0.392431 -0.374284 0.735546 2.821737 3.111723 1.337994 1.712653 1.887894 -0.046775 -0.005454 -0.417687 -0.685403 -1.738825 1.560714 0.251788 -1.682973 -3.325493 -2.180210 0.110638 -0.527888 -0.604672 -1.115279 -2.430901 -0.853489 -1.217150 -1.733588 -2.068602 -0.622358 -0.169710 0.395718 -0.107357 -0.445578 0.340347 -0.849795 -0.845356 -0.476204 -0.038616 -1.081296 -0.109394 0.511896 1.486918 1.439932 1.286447 -1.148292 -1.115330 -0.064588 0.243007 -0.319170 0.050148 -0.141136 -0.317340 -0.256021 0.898059 0.411466 -1.322911 -0.827652 -0.441294 0.709846 0.013996 -0.151130 -0.607775 -0.799800 -0.055994 -0.238987 -0.929136 -2.331297 1.387760 0.629627 0.036003 -0.131034 -0.795343 -0.567162 -0.166289 -0.753369 -1.910938 -0.739969 2.247905 1.493941 -0.024475 -0.316357 -0.332973 -0.405578 -0.884116 -0.826283 -3.088702 1.113014 3.047147 1.704904 0.129379 -0.263803 -0.811629 -0.583609 -1.060344 -2.266138 -3.590520 2.711252 1.665860 -0.982939 0.308964 -0.576292 -0.940885 -0.763787 -1.890816 -2.701889 -1.672117 2.535375 1.136744 -0.573123 0.211166 -0.651770 -0.252191 -1.216910 -0.294656 -1.158149 -0.718271 3.090055 -0.139681 -2.751192 0.097566 -0.065527 0.755042 1.256834 0.079862 -0.085714 1.197230 0.393139 -1.605860 -0.720839 0.092490 -0.239310 0.347731 1.372689 0.398232 0.205887 0.425699 0.648022 -0.253085 -2.498946 -0.009248 -0.686050 -0.443970 -0.156408 -0.164292 -0.039697 -0.478450 -0.638767 -0.619648 -0.535752 0.063865 -0.215343 -0.026576 -0.022666 -0.317080 -0.771067 -0.664926 -0.442808 -0.270541 -0.142079 -0.183679 0.144166 -0.236592 -0.417916 -1.132881 -1.034237 -1.021377 -0.576563 -0.751739 -0.254424 -0.161378 -0.617568 -0.201764 -2.491192 -0.623915 -0.428254 -1.715271 -0.707710 -0.483930 -0.351140 -0.221183 -0.134388 -1.039297 -0.594109 -1.808783 -2.350945 -1.096123 -0.661049 -0.786759 0.603291 -0.442650 0.647298 1.916482 1.854148 0.052669 -3.353822 -2.276870 -1.332823 -1.475626 0.060704 -0.429508 -0.379407 2.183133 2.504542 2.700830 1.783113 -1.640241 -1.332821 -1.959752 -1.107666 0.043064 0.340024 -0.456708 1.073263 0.756060 1.551814 1.443978 1.254768 -0.761495 -1.490426 0.366450 0.261831 -1.159181 0.658505 0.999389 0.132306 1.499873 1.540592 0.695553 1.617609 0.067785 0.130703 1.244315 0.187104 0.459732 0.284487 0.188189 1.092594 1.245356 1.439197 0.178462 0.102593 0.927384 0.470172 -0.079640 0.719567 0.218742 -0.703683 0.317118 1.156535 -0.053501 0.181131 0.198454 -0.126988 0.310599 0.265085 0.164013 0.589400 1.027217 -0.409448 -0.108327 -0.080819 0.156546 0.039036 0.020895 0.468899 -0.129435 0.086267 0.146178 0.953760 -0.083510 -0.503473 -0.766731 0.136667 0.501552 0.576546 -0.735878 -0.407277 0.790808 -0.525415 -0.603997 -1.269693 -0.225815 -0.906408 -1.520367 -1.509427 -1.242294 -0.471596 -1.202985 -1.301818 -0.565928 -0.649131 -2.322961 -1.089196 -1.446387 -1.507215 -1.696958 -1.001500 -2.371114 -2.151134 -0.124733 -0.694746 -0.172920 -0.285791 -0.380005 -1.495070 0.587807 -1.364711 -2.689127 -1.698527 -0.050455 0.042083 0.786745 -1.076352 -0.595681 0.827000 1.312552 -0.518952 -0.364509 1.052893 0.329889 0.544107 -2.478104 -1.834690 -0.408025 -1.428882 0.404084 0.485386 -0.110661 0.421005 0.470877 -0.875883 -0.135302 -0.031982 -0.460173 1.679227 1.511301 0.098441 -0.526247 0.460550 -0.367820 -0.417458 0.717292 -0.963238 -1.250080 0.205932 1.231464 -1.562828 -2.378960 -0.830371 -0.030946 -0.157679 0.882424 0.182540 -0.171703 -2.523220 -0.998308 -0.842190 -0.820345 -0.248610 -0.256660 0.187132 0.256110 0.201921 -0.472466 -0.915297 -2.697604 0.457856 0.741948 -0.356240 -0.074150 0.384298 -0.006732 1.466938 -0.157174 0.125600 -4.087364 2.134049 -1.185978 0.271490 0.037356 -0.784103 -0.422675 -0.233217 0.280663 1.631685 -4.991377 -0.017703 0.355808 0.011835 0.393447 -0.269549 -0.281030 0.629135 0.735912 0.386320 -2.964261 1.208031 0.772449 -0.195255 0.507843 -0.606975 -2.391251 -0.734524 1.470370 -1.423515 -1.070550 0.502853 0.837753 -0.067435 -0.527855 0.219982 -0.986308 -1.245630 -0.007113 -0.550018 -2.865726 -0.134633 -0.211012 0.891457 -0.883025 -0.585419 0.126440 1.530657 -0.481907 -0.260322 -1.986167 -1.143108 -1.861036 -0.890509 0.123134 -0.796984 -2.039687 -0.541754 -0.081568 1.092960 0.189446 -0.596454 -0.478541 0.291915 -0.216691 0.120924 -2.057181 -2.623841 -0.484517 0.562271 1.000755 -0.657898 0.272281 -0.869491 -0.052391 -0.005762 0.837456 -1.355304 -0.768020 0.123755 -0.176532 -1.521685 -1.581601 0.108067 0.061785 -0.593697 -0.821141 -1.031472 -1.006853 0.426247 0.934725 -0.398917 -2.577046 -0.293761 -0.009141 -0.647351 -0.117603 -0.524945 -1.873722 -0.055387 2.405577 -2.264688 -0.638230 -1.068802 -0.049536 -0.004480 -0.273990 -1.001854 -1.661700 1.220930 2.919033 -2.322827 -1.218795 -0.187814 -0.058875 -0.045877 -0.991617 -2.127672 -0.719593 1.222507 1.291154 -2.340056 -1.733289 -0.140385 -0.007399 -0.511484 -0.280276 -1.198313 -2.656291 0.406842 1.578485 -3.064883 -1.427733 -1.059397 0.158793 -0.312609 0.292210 -1.288091 -1.757387 0.377482 1.820540 -2.306809 -1.752402 -1.200240 -0.013376 -0.268383 -0.549094 -0.878887 -0.908465 -1.808048 2.372031 -1.389535 -0.893125 -0.665060 0.191206 -0.219960 -0.884796 -0.977681 -1.640176 0.146449 -0.135156 -1.553149 0.345954 -1.275159 -0.020943 -0.241944 -0.010043 -0.457383 -1.407807 -0.614140 1.190922 -0.652867 -0.561326 -0.030224 -0.190514 0.259842 1.157688 0.783204 0.232567 0.882421 0.219280 -0.349581 -1.259435 -0.778309 0.035620 -0.002171 -0.402398 -0.340614 -0.114096 1.709478 -0.124691 -0.857950 -1.633509 -0.926053 0.192344 0.511607 -0.939350 -0.008994 0.339042 0.974713 -1.162172 -2.479414 -0.581879 0.084660 -0.031282 -0.297514 -0.319562 -0.349252 -0.662737 -1.594864 -3.191608 -1.083323 -0.003181 1.839704 -0.115308 0.471007 0.319196 0.833125 0.783839 -1.188926 -2.725330 -0.927957 0.759446 0.710381 0.577451 0.353484 0.479177 0.658385 0.208755 -0.583991 -2.288994 0.357005 1.913931 1.096071 0.380878 -0.715429 -1.469741 -3.169050 -3.223671 -2.676094 -1.330394 1.026769 2.484937 3.357307 0.402785 -0.368493 -1.288096 -1.559839 -0.980182 -0.527616 0.708610 0.049574 -0.083553 -1.809122 0.251943 -0.987297 -1.495941 -0.631637 -1.149873 0.105184 0.245895 -0.055985 0.293054 -1.541307 0.078038 -0.481475 -1.051333 0.042942 1.117058 2.311443 0.038020 0.493558 -0.291599 0.128605 0.006985 -0.233076 -0.569085 0.949406 -0.447949 0.071417 -0.768759 1.269168 0.293134 -1.990916 -0.135779 0.322904 0.768012 0.562276 -0.817178 1.914313 0.548319 -1.447682 -0.428948 1.887011 -0.109086 0.374288 1.525100 1.420999 -1.007332 1.815991 -0.694505 -1.077723 -0.298078 0.051597 0.460462 1.434644 -1.142395 1.765035 1.524923 0.120558 -2.777793 -0.254854 1.622916 1.360502 0.781771 1.172188 0.184745 1.444039 -0.393850 1.203157 0.678939 -0.100438 0.578858 1.153150 0.617431 1.208260 1.019835 -1.388462 -0.777843 1.299082 1.164392 0.124580 0.029288 2.635771 0.323158 2.022048 0.669601 -1.643774 -1.071635 1.211059 0.528807 -1.228059 -0.069949 0.668165 0.421678 1.362135 0.979084 -1.894334 -2.264121 1.144833 0.949693 -0.812539 0.038943 -0.046088 -0.298785 0.477538 -0.887440 -0.770572 -1.854673 0.518824 -1.230292 0.350365 0.288168 -0.864344 -0.503376 -0.458688 0.625243 0.227194 -0.469125 -0.614469 -1.470066 1.192401 0.580363 -1.448379 -0.033200 -0.018717 -0.860268 -0.927345 -1.424675 -0.939816 -0.272149 -0.390055 1.883599 -0.337435 -0.092800 -0.219187 -1.354509 -1.712915 -1.809653 -0.516378 -0.136623 -0.868225 -0.444688 -1.774682 0.090898 -0.095195 -0.860517 -0.898336 -2.101538 -0.676886 0.927487 0.272016 -0.029184 0.142975 0.033535 -0.210115 -1.047009 -0.882024 -3.785730 0.289695 0.129999 1.325021 0.440401 -1.644046 0.109374 -0.489905 -0.573641 -1.815742 -2.483140 0.187658 0.191731 1.296269 -1.342317 -0.605812 -0.071043 -0.311372 -1.325420 -2.959352 -0.835382 1.208946 0.496284 -0.005086 -0.989908 -2.553451 0.098234 -0.200340 -1.053273 -1.782890 -0.128959 1.607137 0.973628 -0.263259 -2.244628 -3.004543 0.075943 -0.376695 -0.998578 -0.665095 -0.360823 1.010605 1.270892 -0.746965 -2.052252 0.085550 0.044798 -0.330123 -1.447469 -1.432070 -0.258642 0.751149 0.896219 0.476828 1.747507 0.829879 -0.012906 0.118258 -0.191866 -0.189783 0.131752 -1.162780 -0.333239 -0.337831 0.952375 0.801469 -0.093092 -0.061772 -0.199758 -0.622217 -0.633039 -0.423170 -0.265657 0.049490 -0.072539 -0.011696 0.002842 -0.400042 0.068869 0.440468 -0.703757 -0.842602 -0.713321 -0.140427 -0.138336 -0.213145 -0.004487 0.022679 -0.143787 -1.396120 -1.073879 -0.924553 -1.895654 -1.561158 -0.424699 -1.779136 0.049458 0.179086 -0.726984 -0.948385 -0.733513 -0.296907 -2.227384 -1.833574 -1.359629 -0.731993 -0.046180 0.727284 -0.171589 0.225580 -1.908845 -1.117922 1.681524 -2.393753 -1.370912 -0.552006 -0.026518 0.064248 0.958414 0.145696 1.742611 1.109893 -0.614613 -0.155642 1.282863 -0.674874 -0.137559 0.171333 0.935598 -0.082026 0.946274 0.809867 1.727406 1.146867 1.010465 -0.108548 -0.081571 -0.445101 -0.667352 -0.215520 -0.878062 -0.087213 -0.141465 -0.356457 1.027965 2.821559 0.110874 -0.741477 -2.293235 -2.215002 -2.332585 -1.372790 -0.581678 1.641765 1.128931 1.000478 -0.265961 -0.539902 -0.297022 -0.814790 0.733654 1.509914 -0.446574 0.186483 -0.349028 -1.353008 -0.044100 0.069707 -0.877909 -0.894552 0.239369 2.344639 1.688012 1.230886 -0.181073 -2.382841 0.046526 -0.184598 0.675510 -0.232377 -0.219489 -0.169331 2.244086 0.830160 0.185283 -0.197190 0.121158 -0.408038 -0.525526 1.140939 1.261417 0.881518 2.390543 0.254961 0.058053 0.516818 0.177975 -0.093352 2.580801 0.081802 -0.246689 0.206080 1.988959 0.551878 0.346043 -0.088509 0.516818 1.180551 0.553224 0.790686 0.584398 0.667062 2.253996 0.444775 0.530344 0.262370 0.585838 0.919790 0.819709 -0.477430 -1.106203 -0.686610 1.430877 1.413098 -0.056606 -0.559197 0.524972 -1.511602 2.860335 2.587663 1.852869 1.603722 1.884331 0.476198 0.863231 0.802046 0.585830 1.446838 -0.333498 -1.506010 -0.836964 -0.103779 1.952263 1.009315 -0.091765 -1.016722 -0.098090 -1.024525 -1.024364 -0.165150 -0.654910 1.282816 2.848638 0.421844 0.759319 0.917729 -0.573019 -0.885333 -0.725504 -0.646937 -0.429436 0.591521 1.854557 0.999127 -1.015834 0.031264 0.034771 0.145835 0.041559 -1.000362 -0.079594 -0.280802 -0.627507 -0.194943 -0.201461 0.711023 -0.043386 0.499711 0.314717 0.567712 1.331673 1.451665 -0.215928 0.197981 -0.015380 -1.187082 0.129058 -0.320612 -0.291593 2.271940 1.875279 2.666680 0.022715 0.282103 0.756516 -0.328227 0.155436 -0.914193 -1.374407 1.078983 0.224352 0.172604 0.957999 0.485294 0.247489 -0.772454 0.067440 -1.611279 -2.156425 -0.764648 -2.971256 -2.211430 -2.126529 0.210590 1.971986 1.709005 -0.389941 -0.997923 -2.447488 -1.076907 -1.187008 -1.931405 -3.826172 -0.469667 0.414290 1.685305 0.199257 -0.780021 -1.720407 0.776175 0.361776 0.264549 -1.017407 -1.821778 -0.835208 1.221041 -0.445755 -0.769440 -0.254864 0.203016 0.939860 -1.047267 -0.368378 -2.440608 -0.869221 0.058716 0.226704 -0.962037 -1.204330 0.116377 -0.473516 -1.408048 -1.641707 -1.065741 0.011185 -0.519452 0.023020 0.375864 0.468971 0.761432 -0.216837 0.112949 -0.642162 -0.713381 -0.594007 0.042726 -0.097777 -0.167173 0.073552 -0.693969 -0.780831 0.317051 0.829411 -1.582436 -0.299541 -0.759843 -0.023942 -0.342502 -1.267116 1.515101 1.538498 0.816663 -2.362983 -2.137467 -2.324891 -0.144145 -0.019313 0.156928 -1.121552 -0.118470 0.941282 0.242198 -1.254993 1.689699 0.830714 -0.775723 -0.224005 0.107394 -0.531307 -0.209888 0.911401 -0.018883 1.908317 3.593012 1.986710 -0.405875 0.282668 0.492750 0.195723 1.042027 0.874249 -3.065076 -2.940768 -2.304666 -1.579134 2.037244 0.671828 0.343454 0.706381 0.735252 2.113794 -1.838715 -2.187274 -1.072217 -0.214209 -0.042176 0.137537 0.731563 0.121724 0.814361 2.049785 0.980542 0.850421 -1.265488 1.256255 -1.828879 -0.011696 0.136160 -0.593667 2.627049 2.501227 0.360444 2.206194 0.633480 0.073276 -0.937056 0.218859 1.101347 1.005011 -0.077466 3.064948 1.043495 -0.301440 -0.595496 -0.767324 -0.523033 0.000667 0.310067 1.629037 0.293902 0.531305 1.452516 0.064269 -0.577648 -2.184209 -0.633300 0.059194 0.036518 -0.034121 -0.212935 -0.804365 -0.683820 1.712429 0.340770 1.474874 1.022741 -0.037661 -0.032904 -0.259923 -1.951499 -0.497471 -1.214328 0.401859 0.811862 0.793234 0.457028 0.075659 -0.034663 -0.260190 0.964520 -2.194795 -2.422961 -1.126748 0.611894 2.281996 0.585227 0.087260 -0.015989 -0.438868 -0.549240 0.052098 -0.152807 2.390572 -0.482995 -1.636694 -0.445148 -0.010080 0.056944 -0.654193 -1.226240 -1.547492 -3.511359 -2.108080 1.400780 2.005281 2.750940 -0.033277 0.094045 0.874253 0.445476 -1.163120 -0.187278 -1.213053 1.019379 -0.526771 1.398990 -0.092222 0.005101 -0.324335 -0.318804 0.741994 -0.996582 -0.245565 -0.659241 -1.217870 2.247072 -0.023002 -0.086457 -0.581142 -0.691387 -0.581490 -1.647627 0.261532 0.300395 -1.062149 1.644551 -0.066745 0.237786 -0.155438 -1.083595 0.031824 -0.711636 -1.045900 -1.302244 0.961482 -0.484420 -0.033265 -0.089162 0.337273 0.142949 0.376035 -0.417873 0.517559 1.089094 0.856154 -0.967215 0.011114 -0.053488 0.347401 0.298804 -0.930785 0.896888 0.732058 0.638553 1.100236 -0.822697 -0.022637 0.195453 -0.409377 0.613476 0.691879 0.388235 -0.353645 -0.459608 -0.002154 -0.124064 0.067161 0.240017 -0.889608 0.466993 -0.761425 0.507755 -0.457947 3.108032 -0.336048 -2.441901 -0.089017 1.476084 0.220969 -2.148548 -0.717994 0.739048 0.469505 -0.047501 1.503733 -2.234807 -0.160328 -0.267155 -0.710518 0.705363 0.820811 -0.631436 -1.437424 1.494845 -0.451150 -2.243342 -0.036818 0.045619 -0.030688 0.009685 -0.351371 0.331049 0.500640 2.247315 3.127900 -2.765327 0.792552 -0.098585 -1.984205 0.339582 0.715256 -0.940433 -2.791590 2.950729 -0.182806 0.668511 0.191277 1.094986 1.288060 -0.963532 -2.562566 -0.422148 1.232227 2.130456 1.626201 -1.075431 -0.043172 -0.485168 -1.511221 0.995271 -0.558146 1.887969 -1.610603 1.222858 -0.013440 0.719746 -0.041257 0.373254 0.645487 1.150135 1.297958 1.046725 -0.277231 -0.029736 -0.806600 0.262370 -0.087247 0.029435 -0.419743 -0.701993 -0.889885 -1.686098 -1.401513 -0.040829 -0.995224 -0.150349 -0.050488 0.454992 0.303734 -1.551993 -1.358647 -1.289913 -0.754862 0.967922 -1.557503 -0.583623 0.323894 0.269151 -0.159418 -1.005897 -0.850717 -0.435828 -0.013110 0.339061 -0.455414 -0.560257 0.288182 -0.157827 0.091076 -1.457556 -0.891241 -1.990992 -0.824253 -1.640164 -1.345018 -0.296446 0.440755 0.153286 -0.629967 -1.109727 -1.587624 -1.326280 -0.933922 -1.177321 -0.814761 -1.141211 0.836303 1.301366 1.025149 1.824766 1.364886 2.235975 0.390853 0.825905 1.449079 0.872846 0.257138 0.679307 0.124685 2.030035 1.866722 1.144484 1.533813 0.731885 -0.382643 -0.760787 -0.538688 -0.305499 -1.035448 -2.137810 -1.406296 -0.684420 -0.288003 0.019417 -0.081514 0.071920 -0.096309 -0.797742 -1.336813 -3.516276 -2.966724 -1.885870 -0.293763 -0.619325 -1.273524 -1.106538 -0.183206 -0.739054 -0.812075 -1.369754 -1.261688 -1.306861 -2.400417 -0.439719 -1.460308 -0.682589 0.073355 0.052668 -0.130159 -0.731463 0.515089 -1.171303 -0.605979 0.921880 -0.794759 0.273976 0.145866 -0.125724 0.338037 0.385859 0.151295 1.221345 0.557510 -1.195973 1.817957 -1.265843 -0.255403 -0.350784 0.293563 -0.501424 0.697950 -0.219673 1.114848 -0.033389 2.081419 -2.393431 0.040790 0.579201 0.465209 0.575733 -0.430751 -0.130583 2.505062 -2.404550 2.616787 -2.450818 0.308216 0.380730 0.298622 0.584045 0.017133 -0.573252 0.807161 0.251468 3.654269 -3.462520 -0.160756 0.284753 0.398447 0.305842 0.929794 -0.880303 2.887797 -2.456016 4.167570 -1.786904 0.208480 -0.201687 0.788843 0.287527 1.472865 -1.511342 0.388562 -0.033906 3.598696 -3.272515 0.328854 -0.152509 0.625903 0.644098 0.998978 -2.031150 0.728914 -0.367358 2.463695 -0.930680 0.037664 0.704847 0.564427 0.255181 -0.087854 -1.070121 0.409003 1.374185 0.605190 -2.487204 0.171997 0.036186 -0.296832 -0.282823 0.211208 1.174004 -0.367465 0.377192 -0.716404 -0.532816 -0.278154 0.091597 0.407061 -1.311997 -0.569228 -0.214814 -0.763271 -0.242415 -1.334728 -1.349428 -0.531696 0.630374 0.597452 0.100146 -0.869943 -0.969027 -0.303903 -0.203660 -0.406484 -0.699278 -0.623785 -0.167739 0.184143 -0.776885 -0.611203 -0.579966 0.000849 0.503887 -0.133505 -1.093327 -0.892646 -0.025284 0.554045 0.068526 -1.301873 -1.816478 -0.210885 -0.489932 0.235641 -1.585899 -0.856841 0.056360 0.481137 -0.309486 -1.106776 -1.536955 0.768146 -0.399119 -1.524394 -1.772972 -1.106045 -0.297262 0.434013 -0.264451 -2.447281 -1.251188 0.734541 0.812326 -1.427062 -1.679384 -0.722278 -0.982655 0.362783 1.119027 -1.721987 -2.253262 -0.476362 0.788175 -0.586354 -1.425855 -0.498818 -0.234369 0.393929 0.654626 -0.395582 -1.649706 -0.494642 0.406533 -1.022862 -1.209063 -0.383868 0.131837 0.273996 -1.446141 -1.282183 -1.045093 0.185189 -0.681279 -0.251778 0.279195 -0.287120 -0.463096 -0.924226 -0.641030 0.746598 0.568507 -1.058816 -1.370459 -0.289232 -0.287043 -0.097455 0.163729 0.868897 0.201384 -0.482623 0.120867 -0.254901 0.581147 1.214830 0.762853 -0.038437 0.218567 0.951119 -0.166869 0.506413 -0.408065 0.350735 0.735805 0.502194 1.057313 -0.122418 0.090251 0.317701 -2.379233 -2.313951 -1.370305 -1.256845 0.100817 -0.099681 -0.459422 -0.021077 -0.966404 -2.576002 -2.837786 -0.099287 -0.393161 -1.071359 -1.417157 -2.199583 -3.479980 0.048295 -0.476390 -0.762244 -0.390524 -0.160411 -0.046845 0.059725 -2.157054 -0.922550 -1.308063 -0.422347 -1.335556 -0.345777 -0.495595 -0.610471 0.726141 -0.483257 0.792889 1.053171 0.347779 -0.932573 -1.698250 -0.657949 -1.089522 -0.931995 -0.312650 -0.741718 -1.548808 -3.606347 -3.989584 -0.822412 -0.390729 -0.609111 -0.708520 -0.604007 -1.432598 -1.000034 0.366042 2.621125 1.504831 -0.668391 0.826092 0.358340 1.272674 0.157252 -1.937134 -3.740856 -3.218322 -3.336057 -4.222795 0.611033 0.408609 -0.020588 0.808785 1.015893 0.330035 0.037037 0.941212 1.065238 0.473124 -0.170743 0.124521 0.046889 1.631498 0.262131 0.979956 -0.480946 0.405938 0.441305 0.726706 -0.157540 0.024066 0.400373 0.471037 0.534856 -0.508877 0.525118 0.032135 1.348539 -0.338853 -0.062260 -1.204616 0.446290 -0.599906 -0.349000 -0.794229 -1.736100 -1.605867 1.235643 0.513453 -0.226517 -1.770549 -0.345202 0.041779 -0.126729 1.457662 -2.161820 -1.779197 0.910611 0.836392 -0.190716 -1.102421 -0.333968 -1.485584 0.823685 0.111595 -1.030959 -3.490086 3.068111 -0.071893 0.097887 0.041371 -0.942826 -0.340403 0.731469 0.322485 -1.558632 -1.830578 1.576677 -0.341698 0.116788 0.347784 -0.373392 -0.095493 1.164160 -0.062326 -1.618036 -1.612415 2.505985 -0.912789 -0.049025 -1.199471 -1.105375 0.067734 1.426277 0.864259 -2.166441 -1.335078 2.450196 -1.296487 0.023158 -1.023611 0.108615 0.995754 0.407389 -1.181534 -0.889529 0.686082 0.200618 -0.736616 -0.096941 -0.155141 -0.365390 -0.348948 -0.494447 -0.477683 0.416556 0.765170 -0.218706 -0.689912 0.632236 -0.735563 1.878854 1.265201 -0.782547 -3.316190 0.021629 -1.266761 0.125959 3.069785 3.940686 1.105258 -1.460254 4.829651 -2.328162 -4.149975 0.101209 -0.991802 -0.468852 -2.078674 0.954148 0.485297 3.143700 2.368346 1.518046 -0.320906 -4.488281 -0.657827 -0.647832 0.425264 0.177615 1.151776 -4.354361 -1.290442 -0.408138 -3.508547 4.071472 -2.780285 1.723871 -3.384222 1.495192 -3.944800 2.691328 -1.772792 -3.483771 -0.405750 1.817783 -3.210226 3.717052 -5.193038 3.389414 -3.614904 2.339434 -1.717971 1.953993 2.483990 1.411681 -1.905062 0.556238 -3.963492 1.704876 2.449699 -2.281289 -1.863676 1.533967 -1.742600 -3.866177 0.670622 1.976000 1.376032 -3.119540 -2.183507 -2.158832 -2.093256 0.122172 -0.490568 5.271483 -1.604894 1.671774 0.538047 -5.005531 1.159971 1.823613 -0.110931 -0.085307 0.515635 -3.491939 1.229722 -1.194902 0.244558 0.998086 1.854643 -1.427150 -3.733170 -0.923472 5.642664 0.501625 -2.650268 -1.287254 -4.277472 -0.377702 -4.024045 1.883380 2.965112 -4.617642 0.457944 -3.394860 3.143250 -0.025024 -3.299852 -1.464745 -4.291701 -1.399160 -0.266661 -0.246214 -2.200315 0.747448 -4.738771 0.535633 1.533647 -3.369721 2.672162 -1.020524 -1.747004 -0.202687 -3.892646 1.910679 -2.748107 0.723494 -1.665544 -2.915238 -6.537880 1.821767 -1.880835 -2.364144 -6.102019 -3.993531 2.330074 3.061602 -2.125390 2.559445 0.097109 -1.338032 -0.843449 0.429616 -0.322580 3.972508 -1.460239 -1.816250 -2.293021 2.864232 3.900842 0.954831 -1.194107 1.045682 1.973685 0.830681 -1.833900 4.499101 -0.980655 1.119190 2.207936 -2.139884 -3.150484 0.853856 -3.609960 1.731564 -1.422520 -1.908444 -0.058904 0.339852 -2.235330 1.936140 1.733093 0.336172 -2.633024 -1.278489 -4.169787 -3.381595 -0.389140 1.614308 -0.835980 0.089246 -6.065554 -0.691961 -1.509195 -3.020133 2.181917 -1.371058 -1.712249 3.815853 -4.451249 2.431671 -0.354108 0.481723 -1.515406 -1.362891 0.807811 -3.221985 1.325110 -0.223307 -0.560711 -0.347756 -0.824977 -0.880066 2.778242 -0.200939 1.466388 -0.888289 -1.246239 0.564607 0.230027 -0.531076 -5.149322 3.300263 -0.040524 0.256821 -1.025675 -1.591851 1.125134 -3.767569 -1.344178 -1.229943 -3.880630 0.882442 -0.480003 0.827754 -0.476027 -0.594091 0.513221 0.005466 0.928970 -1.698499 1.362813 -1.015988 0.732743 -1.729877 0.257339 -1.408350 1.568333 -1.587258 0.501909 0.119767 -0.858078 -0.375446 1.392148 -1.656736 1.368396 -0.001448 1.360319 -0.586529 2.516185 -3.775804 -2.546882 0.976655 1.070420 -1.432964 3.333973 -3.538509 -2.515873 -0.608487 -0.267730 5.178117 0.804785 3.642140 9.646930 0.873366 1.476020 2.744520 4.217872 -0.063129 -1.709101 -3.763501 -3.885107 2.097427 4.244270 2.436790 1.538337 1.444453 1.051757 1.670619 3.443870 3.123989 1.060301 -0.012030 ";

Matrix read2(int flag = 0) {
	sss.str(ch);
	double temp[max1][max2];
	double temp1[max1];
	for(int i = 1; i <= hidden; i++)
		for(int j = 1; j <= feature; j++) sss >> temp[i][j];
	V = Matrix(hidden, feature, temp);
	for(int i = 1; i <= output; i++)
		for(int j = 1; j <= hidden; j++) sss >> temp[i][j];
	W = Matrix(output, hidden, temp);
	for(int i = 1; i <= hidden; i++) sss >> temp1[i];
	hidden_bias = Matrix(hidden, 1, temp1);
	for(int i = 1; i <= output; i++) sss >> temp1[i];
	output_bias = Matrix(output, 1, temp1);
	if(flag) {
		char tmpc;
		for(int i = 1; i <= 100; i++) {
			cin >> tmpc;
			if(tmpc == '#') temp1[i] = 1;
			if(tmpc == '=') temp1[i] = 0.5;
			if(tmpc == '.') temp1[i] = 0;
		}
	}
	return Matrix(100, 1, temp1);
}
int predict(Matrix X, int flag = 0) {
	alpha = V * X;
	b = sigmoid(alpha - hidden_bias);
	mbeta = W * b;
	y = sigmoid(mbeta - output_bias);
	double maxv = -1;
	int id = -1;
	if(flag) y.printerr();
	for(int i = 1; i <= 10; i++) {
		if(y.ele(i, 1) > maxv) {
			maxv = y.ele(i, 1);
			id = i;
		}
	}
	if(id == 10) id = 0;
	return id;
}
void train() {
	freopen("mdata_new.txt", "r", stdin);
	freopen("mnet.txt", "w", stdout);
	srand(time(NULL));
	read();
	read2();
//	random_inilialize();
	double temp[max1][max2];
	memset(temp, 0, sizeof(temp));
	for(int i = 1; i <= 10000; i++) {
		deltaV = Matrix(V.row(), V.col(), temp);
		deltaW = Matrix(W.row(), W.col(), temp);
		int ok = 1;
		for(int j = 1; j <= data_num; j++) {
			Matrix a = Matrix(feature, 1, mdata[j]);
			int res = predict(a);
			if(res != Y[j]) {
				if(i % 100 == 0) {
					predict(a, 1);
					cerr << j << ' ' << res << ' ' << Y[j] << endl;
				}
				Matrix X;
				int right = get_data(j, X);
				trainANN(X, right);
				ok = 0;
				break;
			}
		}
		if(ok) {
			cerr << "ok" << endl;
			break;
		}
	}
	V.print();
	W.print();
	hidden_bias.print();
	output_bias.print();
	return;
}

void play() {
	cout << predict(read2(1)) << endl;
	return;
}
void copyy() {
	freopen("mdata.txt", "r", stdin);
	freopen("mdata_new.txt", "w", stdout);
	read3();
	for(int x = 1; x <= data2_num; x++) {
		int ok = 1;
		while(ok) {
			for(int j = 1; j <= 10; j++) {
				if(mdata2[x][10][j] != '.') {
					ok = 0;
					break;
				}
			}
			if(ok) {
				for(int k = 1; k <= 10; k++) mdata2[data2_num + 1][1][k] = '.';
				for(int j = 2; j <= 10; j++) {
					for(int k = 1; k <= 10; k++) {
						mdata2[data2_num + 1][j][k] = mdata2[x][j - 1][k];
					}
				}
				for(int j = 1; j <= 10; j++) {
					for(int k = 1; k <= 10; k++) {
						mdata2[x][j][k] = mdata2[data2_num + 1][j][k];
					}
				}
			}
		}
		ok = 1;
		while(ok) {
			for(int j = 1; j <= 10; j++) {
				if(mdata2[x][j][10] != '.') {
					ok = 0;
					break;
				}
			}
			if(ok) {
				for(int k = 1; k <= 10; k++) mdata2[data2_num + 1][k][1] = '.';
				for(int j = 1; j <= 10; j++) {
					for(int k = 2; k <= 10; k++) {
						mdata2[data2_num + 1][j][k] = mdata2[x][j][k - 1];
					}
				}
				for(int j = 1; j <= 10; j++) {
					for(int k = 1; k <= 10; k++) {
						mdata2[x][j][k] = mdata2[data2_num + 1][j][k];
					}
				}
			}
		}
	}
	
	for(int x = 1; x <= data2_num; x++) {
		int ok = 1;
		for(int j = 1; j <= 10; j++) {
			if(mdata2[x][1][j] != '.') {
				ok = 0;
				break;
			}
		}
		if(ok) {
			++data2_num;
			for(int j = 1; j <= 10; j++) {
				for(int k = 1; k <= 10; k++) {
					mdata2[data2_num][j][k] = mdata2[x][j % 10 + 1][k];
				}
			}
			Y[data2_num] = Y[x];
		}
	}
	for(int x = 1; x <= data2_num; x++) {
		int ok = 1;
		for(int j = 1; j <= 10; j++) {
			if(mdata2[x][j][1] != '.') {
				ok = 0;
				break;
			}
		}
		if(ok) {
			++data2_num;
			for(int j = 1; j <= 10; j++) {
				for(int k = 1; k <= 10; k++) {
					mdata2[data2_num][j][k] = mdata2[x][j][k % 10 + 1];
				}
			}
			Y[data2_num] = Y[x];
		}
	}
	for(int x = 1; x <= data2_num; x++) {
		for(int i = 1; i <= 10; i++) {
			for(int j = 1; j <= 10; j++) {
				cout << mdata2[x][i][j];
			}
			cout << endl;
		}
	}
	for(int x = 1; x <= data2_num; x++) {
		cout << Y[x] << ' ';
	}
	cout << endl;
	cerr << data2_num << endl;
	return;
}
int main() {
	train();
	return 0;
}
/*
==========
==========
==...=====
==.=======
==.=.=====
==...=====
==.=.=====
==...=====
==========
==========
*/
